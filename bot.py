#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""Discord bot que monitora clips recentes da Twitch."""

import os
import io
import asyncio
from datetime import datetime, timezone, timedelta
from typing import Dict, Set, List, Optional

import aiohttp
import discord
from discord.ext import commands, tasks
from dotenv import load_dotenv
# Carrega vari√°veis de ambiente
# ---- Configura√ß√£o ----
TWITCH_CLIENT_ID = os.getenv("TWITCH_CLIENT_ID")
TWITCH_SECRET = os.getenv("TWITCH_SECRET")

# Intervalo entre verifica√ß√µes de novos clips (segundos)
CLIP_CHECK_SECONDS = int(os.getenv("CLIP_CHECK_SECONDS", "30"))
# Quantas horas no passado considerar ao iniciar o monitoramento
CLIP_LOOKBACK_HOURS = float(os.getenv("CLIP_LOOKBACK_HOURS", "2"))
# Mostrar visualiza√ß√µes, autor e data dos clips
CLIP_SHOW_DETAILS = os.getenv("CLIP_SHOW_DETAILS", "true").lower() == "true"
# Tempo limite de chamadas HTTP
CLIP_API_TIMEOUT = int(os.getenv("CLIP_API_TIMEOUT", "10"))
# Enviar video mp4 como anexo
CLIP_ATTACH_VIDEO = os.getenv("CLIP_ATTACH_VIDEO", "false").lower() == "true"
# Configura√ß√£o do bot
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix="!", intents=intents)

# Por servidor: configura√ß√µes, ids de clips enviados e hor√°rio da √∫ltima verifica√ß√£o
TwitchConfig = Dict[str, str]
posted_clips: Dict[int, Set[str]] = {}
last_check_time: Dict[int, datetime] = {}
# ---- Utilidades Twitch ----
        "grant_type": "client_credentials"

            async with session.post(url, data=params, timeout=CLIP_API_TIMEOUT) as resp:
                resp.raise_for_status()
                data = await resp.json()
                return data.get("access_token")
        print(f"Erro ao obter token: {e}")
        return None
    """Busca o ID do broadcaster pelo nome de usu√°rio."""
    url = "https://api.twitch.tv/helix/users"
        "Authorization": f"Bearer {token}"
    params = {"login": username}

            async with session.get(url, headers=headers, params=params, timeout=CLIP_API_TIMEOUT) as resp:
                return None
    except Exception as e:
        return None
    """Converte URL da thumbnail para URL do v√≠deo."""
    """Busca clips de um broadcaster em um per√≠odo espec√≠fico."""
    headers = {
        "Client-ID": TWITCH_CLIENT_ID,
        "Authorization": f"Bearer {token}"
    }

    except Exception as e:
        return []
    """Cria embed do Discord para um clip."""
    embed = discord.Embed(
        title=clip.get("title", "Clip"),
        url=clip.get("url"),
        color=0x9146FF,
    )
    embed.add_field(name="üì∫ Canal", value=username, inline=True)

    if CLIP_SHOW_DETAILS:
        embed.add_field(name="üëÄ Views", value=str(clip.get("view_count", 0)), inline=True)
        embed.add_field(name="üë§ Criado por", value=clip.get("creator_name", "?"), inline=True)

        created = clip.get("created_at", "")
        if created:
            dt = datetime.fromisoformat(created.replace("Z", "+00:00")).strftime("%d/%m/%Y %H:%M")
            embed.add_field(name="üìÖ Data", value=dt, inline=True)

    if clip.get("thumbnail_url"):
        embed.set_image(url=clip["thumbnail_url"])

    return embed

# ---- Eventos do Bot ----
@bot.event
async def on_ready():
    """Evento executado quando o bot fica online."""
    print(f"{bot.user} est√° online!")
    try:
        synced = await bot.tree.sync()
        print(f"Sincronizados {len(synced)} comando(s)")
    except Exception as e:
        print(f"Erro ao sincronizar comandos: {e}")

    if not check_twitch_clips.is_running():
        check_twitch_clips.start()
# ---- Comandos do Bot ----
async def twitch_setup(interaction: discord.Interaction, canal_twitch: str, canal_discord: discord.TextChannel):
    await interaction.response.defer()

    username = canal_twitch.replace("@", "").lower()
    server_id = interaction.guild.id

    # Obter token e ID do broadcaster
            color=0xff0000
            title="‚ùå Canal n√£o encontrado",
            color=0xff0000
    # Salvar configura√ß√£o
        "discord_channel": canal_discord.id

        title="‚úÖ Configura√ß√£o salva!",
        description=f"Monitorando clips de **{username}** em {canal_discord.mention}",
        color=0x00ff00
    await interaction.followup.send(embed=embed)

            color=0xff0000

    embed.add_field(name="üì∫ Canal", value=config["username"], inline=True)
    embed.add_field(name="üí¨ Canal Discord", value=channel.mention if channel else "?", inline=True)
    embed.add_field(name="üîÑ Frequ√™ncia", value=f"{CLIP_CHECK_SECONDS}s", inline=True)
    embed.add_field(name="üìä Clips enviados", value=len(posted_clips.get(server_id, set())), inline=True)
    await interaction.response.send_message(embed=embed)
    await interaction.response.send_message(f"üèì Pong! {latency}ms")
@bot.tree.command(name="help", description="Mostra todos os comandos dispon√≠veis")
async def help_command(interaction: discord.Interaction):
    embed = discord.Embed(
        title="ü§ñ Comandos do Bot",
        description="Aqui est√£o todos os comandos dispon√≠veis:",
        color=0x0099ff
    )
    embed.add_field(
        name="üì∫ Twitch",
        value="`/twitch_setup` - Configura monitoramento\n`/twitch_status` - Status do monitoramento",
        inline=False
    )

    embed.add_field(
        name="üîß Utilidades",
        value="`/ping` - Verifica lat√™ncia\n`/help` - Mostra esta mensagem",
        inline=False
    )

    await interaction.response.send_message(embed=embed)

# ---- Loop de Verifica√ß√£o de Clips ----
@tasks.loop(seconds=CLIP_CHECK_SECONDS)
async def check_twitch_clips():
    """Loop principal que verifica novos clips."""
    now = datetime.now(timezone.utc)
    for server_id, cfg in list(twitch_configs.items()):
        try:
            start = last_check_time.get(server_id, now - timedelta(hours=CLIP_LOOKBACK_HOURS))
            clips = await fetch_clips(cfg["broadcaster_id"], start, now, token)

            # Ordenar clips por data de cria√ß√£o
            clips.sort(key=lambda c: c.get("created_at", ""))

            for clip in clips:
                clip_id = clip["id"]
                created = datetime.fromisoformat(clip["created_at"].replace("Z", "+00:00"))

                # Pular clips j√° enviados ou muito antigos
                if clip_id in posted_clips.get(server_id, set()) or created < start:
                    continue

                channel = bot.get_channel(cfg["discord_channel"])
                if not channel:
                    continue

                # Criar embed e enviar
                embed = create_clip_embed(clip, cfg["username"])
                files = []

                # Anexar v√≠deo se configurado
                if CLIP_ATTACH_VIDEO and clip.get("thumbnail_url"):
                    video_url = clip_video_url(clip["thumbnail_url"])
                    try:
                        async with aiohttp.ClientSession() as session:
                            async with session.get(video_url, timeout=CLIP_API_TIMEOUT) as resp:
                                resp.raise_for_status()
                                data = await resp.read()
                                files.append(discord.File(io.BytesIO(data), filename="clip.mp4"))
                    except Exception as e:
                        print(f"Erro ao baixar v√≠deo do clip: {e}")

                await channel.send(content=clip.get("url"), embed=embed, files=files)
                posted_clips.setdefault(server_id, set()).add(clip_id)

                # Atualizar √∫ltimo tempo de verifica√ß√£o
                if created > last_check_time.get(server_id, start):
                    last_check_time[server_id] = created

            # Se n√£o h√° clips, atualizar tempo mesmo assim
            if not clips and server_id not in last_check_time:
                last_check_time[server_id] = now

        except Exception as e:
            print(f"Erro ao verificar clips para servidor {server_id}: {e}")

# ---- Execu√ß√£o ----
    missing_vars = []

        missing_vars.append("DISCORD_TOKEN")
        missing_vars.append("TWITCH_CLIENT_ID")
        missing_vars.append("TWITCH_SECRET")

    if missing_vars:
        print(f"‚ùå Vari√°veis de ambiente faltando: {', '.join(missing_vars)}")
        if "DISCORD_TOKEN" in missing_vars:
            print("Bot n√£o pode iniciar sem DISCORD_TOKEN.")
            exit(1)
        else:
            print("‚ö†Ô∏è Twitch desabilitado. Defina TWITCH_CLIENT_ID e TWITCH_SECRET para habilitar.")

    if DISCORD_TOKEN:
        print("üöÄ Iniciando bot...")


# -------------------- Execu√ß√£o --------------------
        print("‚ùå Vari√°veis faltando: " + ", ".join(missing))
                        else:
                            print(f"[DEBUG] Enviando link do clip {clip_id}")
                            await channel.send(content=message)

                    last_clips[server_id].add(clip_id)

                if created_at >= latest_time:
                    latest_time = created_at

        embed = discord.Embed(title="üì∫ Status do Monitoramento Twitch", color=0x9146FF)

@bot.tree.command(name="help", description="Mostra todos os comandos dispon√≠veis")

        except Exception as e:
            print(f"Erro ao verificar clips para servidor {server_id}: {e}")

@bot.tree.command(name="twitch_status", description="Mostra o status do monitoramento da Twitch")
async def twitch_status(interaction: discord.Interaction):
    server_id = interaction.guild.id

    if server_id not in twitch_configs:
        embed = discord.Embed(
            title="‚ùå Twitch n√£o configurado",
            description="Use `/twitch_setup` para configurar o monitoramento de clips.",
            color=0xff0000
        )
    else:
        config = twitch_configs[server_id]
        channel = bot.get_channel(config['discord_channel'])

        embed = discord.Embed(
    if not twitch_configs:
        return

    token = await get_twitch_token()
    if not token:
        print("Erro: N√£o foi poss√≠vel obter token da Twitch")
        return

        clips = await fetch_clips(cfg["broadcaster_id"], start, now, token)
            color=0x9146ff
        )
        embed.add_field(name="üì∫ Canal", value=config['username'], inline=True)
        embed.add_field(name="üí¨ Canal Discord", value=channel.mention if channel else "Canal n√£o encontrado", inline=True)
        embed.add_field(name="‚úÖ Status", value="Ativo", inline=True)
        embed.add_field(name="üîÑ √öltima verifica√ß√£o", value=f"A cada {CLIP_CHECK_SECONDS}s", inline=True)
        embed.add_field(name="üìä Clips monitorados", value=len(last_clips.get(server_id, [])), inline=True)

    await interaction.response.send_message(embed=embed)

# ==================== COMANDOS GERAIS ====================

@bot.tree.command(name="ping", description="Verifica a lat√™ncia do bot")
async def ping(interaction: discord.Interaction):
    latency = round(bot.latency * 1000)
    embed = discord.Embed(
        title="üèì Pong!",
        description=f"Lat√™ncia: **{latency}ms**",
        color=0x00ff00
    )
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="help", description="Mostra todos os comandos dispon√≠veis")
async def help_command(interaction: discord.Interaction):
    embed = discord.Embed(
        title="ü§ñ Comandos do Bot",
        description="Aqui est√£o todos os comandos dispon√≠veis:",
        color=0x0099ff
    )

    embed.add_field(
        name="üì∫ Twitch",
        value="`/twitch_setup` - Configura monitoramento\n`/twitch_status` - Status do monitoramento",
        inline=False
    )

    embed.add_field(
        name="üîß Utilidades",
        value="`/ping` - Verifica lat√™ncia\n`/help` - Mostra esta mensagem",
        inline=False
    )

    await interaction.response.send_message(embed=embed)

# Inicia o bot
if __name__ == "__main__":
    missing = []
        missing.append("DISCORD_TOKEN")
    if not TWITCH_CLIENT_ID:
        missing.append("TWITCH_CLIENT_ID")
    if not TWITCH_SECRET:
        missing.append("TWITCH_SECRET")

    if missing:
        print("‚ùå Vari√°veis de ambiente faltando: " + ", ".join(missing))
    if not DISCORD_TOKEN:
        missing_vars.append("DISCORD_TOKEN")
    if not TWITCH_CLIENT_ID:
        missing_vars.append("TWITCH_CLIENT_ID")
    if not TWITCH_SECRET:
        missing_vars.append("TWITCH_SECRET")

    if missing_vars:
        print(f"‚ùå Vari√°veis de ambiente faltando: {', '.join(missing_vars)}")
        if "DISCORD_TOKEN" in missing_vars:
            print("Bot n√£o pode iniciar sem DISCORD_TOKEN.")
            exit(1)
        else:
            print("‚ö†Ô∏è Twitch desabilitado. Defina TWITCH_CLIENT_ID e TWITCH_SECRET para habilitar.")

    if DISCORD_TOKEN:
        bot.run(DISCORD_TOKEN)
