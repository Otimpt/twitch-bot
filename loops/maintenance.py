"""Loop de manuten√ß√£o e limpeza"""

import asyncio
from datetime import datetime, timedelta
from discord.ext import tasks

from config.settings import *
from utils.cache import save_cache, cleanup_old_clips, backup_cache
from utils.helpers import log, debug_log

@tasks.loop(hours=24)  # Executar diariamente
async def maintenance_loop():
    """Loop de manuten√ß√£o di√°ria"""
    log("üßπ Iniciando manuten√ß√£o di√°ria")
    
    try:
        # Limpeza de clips antigos
        await cleanup_old_data()
        
        # Backup do cache
        await create_daily_backup()
        
        # Reset de estat√≠sticas se necess√°rio
        await reset_statistics()
        
        # Verificar integridade dos dados
        await verify_data_integrity()
        
        log("‚úÖ Manuten√ß√£o di√°ria conclu√≠da")
        
    except Exception as e:
        log(f"Erro na manuten√ß√£o: {e}", "ERROR")

async def cleanup_old_data():
    """Limpa dados antigos"""
    try:
        # Limpar clips antigos (mais de 30 dias)
        cleanup_old_clips(30)
        
        # Limpar streamers inativos h√° muito tempo
        await cleanup_inactive_streamers()
        
        log("üóëÔ∏è Limpeza de dados conclu√≠da")
        
    except Exception as e:
        log(f"Erro na limpeza: {e}", "ERROR")

async def cleanup_inactive_streamers():
    """Remove streamers que n√£o t√™m clips h√° muito tempo"""
    cutoff_date = datetime.now() - timedelta(days=90)
    removed_count = 0
    
    for server_id, streamers in list(server_streamers.items()):
        for broadcaster_id, config in list(streamers.items()):
            # Verificar se o streamer teve atividade recente
            # (Esta √© uma implementa√ß√£o simplificada)
            if not config.enabled:
                # Remover streamers desabilitados h√° mais de 90 dias
                # Aqui voc√™ poderia adicionar l√≥gica mais sofisticada
                pass
    
    if removed_count > 0:
        save_cache()
        log(f"üóëÔ∏è Removidos {removed_count} streamers inativos")

async def create_daily_backup():
    """Cria backup di√°rio"""
    try:
        timestamp = datetime.now().strftime("%Y%m%d")
        backup_file = f"backup_daily_{timestamp}_{CACHE_FILE}"
        
        if backup_cache(backup_file):
            log(f"üíæ Backup di√°rio criado: {backup_file}")
        
    except Exception as e:
        log(f"Erro no backup: {e}", "ERROR")

async def reset_statistics():
    """Reseta estat√≠sticas quando necess√°rio"""
    try:
        reset_count = 0
        
        for server_id, stats in server_stats.items():
            # Verificar se precisa resetar estat√≠sticas
            if stats.should_reset_daily():
                stats.reset_daily_stats()
                reset_count += 1
            
            if stats.should_reset_weekly():
                stats.reset_weekly_stats()
                reset_count += 1
                
            if stats.should_reset_monthly():
                stats.reset_monthly_stats()
                reset_count += 1
        
        if reset_count > 0:
            save_cache()
            log(f"üìä Estat√≠sticas resetadas para {reset_count} per√≠odos")
            
    except Exception as e:
        log(f"Erro no reset de estat√≠sticas: {e}", "ERROR")

async def verify_data_integrity():
    """Verifica integridade dos dados"""
    try:
        issues_found = 0
        
        # Verificar se todos os canais Discord ainda existem
        from bot import bot  # Import local
        
        for server_id, streamers in server_streamers.items():
            guild = bot.get_guild(server_id)
            if not guild:
                log(f"‚ö†Ô∏è Servidor {server_id} n√£o encontrado", "WARNING")
                continue
                
            for broadcaster_id, config in streamers.items():
                # Verificar canal de clips
                clip_channel = bot.get_channel(config.discord_channel)
                if not clip_channel:
                    log(f"‚ö†Ô∏è Canal de clips n√£o encontrado: {config.discord_channel} para {config.username}", "WARNING")
                    issues_found += 1
                
                # Verificar canal de lives
                if config.live_notifications and config.live_channel:
                    live_channel = bot.get_channel(config.live_channel)
                    if not live_channel:
                        log(f"‚ö†Ô∏è Canal de lives n√£o encontrado: {config.live_channel} para {config.username}", "WARNING")
                        issues_found += 1
        
        if issues_found == 0:
            log("‚úÖ Integridade dos dados verificada - tudo OK")
        else:
            log(f"‚ö†Ô∏è Encontrados {issues_found} problemas de integridade")
            
    except Exception as e:
        log(f"Erro na verifica√ß√£o de integridade: {e}", "ERROR")

@maintenance_loop.before_loop
async def before_maintenance():
    """Aguarda o bot estar pronto"""
    from bot import bot  # Import local
    await bot.wait_until_ready()
    
    # Aguardar 1 hora ap√≥s o bot iniciar para primeira manuten√ß√£o
    await asyncio.sleep(3600)
    log("üßπ Loop de manuten√ß√£o iniciado")

@maintenance_loop.error
async def maintenance_error(error):
    """Trata erros do loop de manuten√ß√£o"""
    log(f"Erro no loop de manuten√ß√£o: {error}", "ERROR")
    # Continuar mesmo com erro - manuten√ß√£o n√£o √© cr√≠tica
